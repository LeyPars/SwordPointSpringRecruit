/*
使用B+树的原因：
        1.一个存储节点一般是一次I/O操作，I/O操作相对内存来说很慢
		2.支持范围查询
存储引擎：
Myisam: 索引为索引，数据为数据，分属不同的文件
		存储结构为B+树，索引的叶子结点存储的包含的是数据在磁盘上的地址
Innodb: 聚集索引：B+树，叶子结点上存储的是整行数据
		非聚集索引：B+树，叶子结点上存储的是主键的值
		主键：指定则为主键索引，否则选择唯一标识列建立主键索引，否则使用隐藏列作为主键索引
		为什么使用自增主键：B+树的插入在最末端，无需调整，随机主键会引发B+树的失衡与平衡调整
联合索引：最左匹配原则：范围查询和模糊查询会导致查询失效
MVCC：
MySQL底层可重复读与提交读：基于MVCC，为每一行维护了两个隐藏字段，事务号和回滚指针，
        可重复读只在会话的第一条操作语句时生成一致性视图Readview，提交度则每次都会
		生成Readview,ReadView包括活跃的事务id和当前提交未提交的最大事务id（max_id）
		Readview将事务分为三部分，从版本链上寻找：
		 事务部分1（可见） min_id ~ max_id  事务部分3（不可见）
		其中位于min_id ~ max_id的事务，若当前事务为活跃事务，则表示未提交，如果记录为当前事务
		更改的，则可见，否则不可见。若当前事务不在活跃列表，则表明已提交，可见


*/